#!/bin/bash

# exit on any error
set -e

# configuration
export PACKER_CACHE_DIR="$HOME/.packer"

# calculate variables
scriptPath="$(readlink -f $0)"
scriptName="$(basename $scriptPath)"
scriptFolder="$(dirname $scriptPath)"
workFolder="/tmp/packer"
tmpFolder="$workFolder/$(date +%s)"
packerFile="$tmpFolder/packer.json"
preseedFile="$tmpFolder/preseed.cfg"
bootstrapFile="$tmpFolder/bootstrap.sh"

# --------------------------------------------------------
# Function for creating log entries on the console
# --------------------------------------------------------
# $1 - Log level
# $2 - Log text
# --------------------------------------------------------
function log() {

    # read parameters
    local level="$1"
    local text="$2"

    # create log message
    local now=$(date +"%d-%m-%Y %H:%M:%S")
    echo -e "\n$now [$level] $text\n"
}

# ---------------------------------------------------------------
# Function for printing the usage of this script
# ---------------------------------------------------------------
function usage() {

    # print help text
    cat <<USAGE
Usage:
  $0 [Options] <Args>

Options:
  --esxi-server         <server>        The ESXi server
  --esxi-username       <username>      The ESXi username
  --esxi-password       <password>      The ESXi password
  --esxi-datastore      <datastore>     The ESXi datastore
  --vm-name             <name>          The VM name
  --vm-cores            <cores>         The number of virtual CPU Cores of the VM
  --vm-ram-size         <ram>           The RAM size of the VM (in MB)
  --vm-disk-size        <disk>          The Disk size of the VM (in GB)
  --vm-network          <network>       The Network name of the VM
  --os-type             <os>            The type of the OS
  --os-username         <username>      The username of the OS
  --os-password         <password>      The password of the OS
  --os-domain           <domain>        The network domain of the OS
  --os-keyboard-layout  <layout>        The keyboard layout of the OS
  --os-locale           <locale>        The locale of the OS
  --os-timezone         <timezone>      The timezone of the OS
  --help                                Print this help text

Example:
  $0 --esxi-server esxi.my.domain \\
     --esxi-username root \\
     --esxi-password my-password \\
     --esxi-datastore my-datastore \\
     --vm-name my-vm \\
     --vm-cores 1 \\
     --vm-ram-size  512 \\
     --vm-disk-size 10 \\
     --vm-network "VM Network" \\
     --os-type ubuntu-trusty \\
     --os-username my-username \\
     --os-password my-password \\
     --os-domain my.domain \\
     --os-locale de_DE.UTF-8 \\
     --os-keyboard-layout de \\
     --os-timezone Europe/Berlin

USAGE

    # exit with error
    exit -1
}

# print application title
echo ""
echo "--------------------------"
echo "Packer ESXi VM Provisioner"
echo "--------------------------"
echo ""

# get command line arguments
log "INFO" "Getting arguments from command line"
options=$@
arguments=($options)
i=0

for argument in $options
do
    i=$((i + 1))

    case $argument in
        --esxi-server)
            esxiServer="${arguments[i]}"
        ;;
        --esxi-username)
            esxiUsername="${arguments[i]}"
        ;;
        --esxi-password)
            esxiPassword="${arguments[i]}"
        ;;
        --esxi-datastore)
            esxiDatastore="${arguments[i]}"
        ;;
        --vm-name)
            vmName="${arguments[i]}"
        ;;
        --vm-cores)
            vmCores="${arguments[i]}"
        ;;
        --vm-ram-size)
            vmRamSize="${arguments[i]}"
        ;;
        --vm-disk-size)
            vmDiskSize="${arguments[i]}"
        ;;
        --vm-network)
            vmNetwork="${arguments[i]}"
        ;;
        --os-type)
            osType="${arguments[i]}"
        ;;
        --os-username)
            osUsername="${arguments[i]}"
        ;;
        --os-password)
            osPassword="${arguments[i]}"
        ;;
        --os-domain)
            osDomain="${arguments[i]}"
        ;;
        --os-keyboard-layout)
            osKeyboardLayout="${arguments[i]}"
        ;;
        --os-locale)
            osLocale="${arguments[i]}"
        ;;
        --os-timezone)
            osTimezone="${arguments[i]}"
        ;;
        --help)
            usage
        ;;
    esac
done

# read arguments from user input if not specified
log "INFO" "Reading arguments from user input if not specified"
if [ "$esxiServer" == "" ] ; then read -p "ESXi Server: " esxiServer ; fi
if [ "$esxiUsername" == "" ] ; then read -p "ESXi Username: " esxiUsername ; fi
if [ "$esxiPassword" == "" ] ; then read -s -p "ESXi Password: " esxiPassword && echo "" ; fi
if [ "$esxiDatastore" == "" ] ; then read -p "ESXi Datastore: " esxiDatastore ; fi
if [ "$vmName" == "" ] ; then read -p "VM Name: " vmName ; fi
if [ "$vmCores" == "" ] ; then read -p "VM CPU Cores: " vmCores ; fi
if [ "$vmRamSize" == "" ] ; then read -p "VM RAM Size (in MB): " vmRamSize ; fi
if [ "$vmDiskSize" == "" ] ; then read -p "VM Disk Size (in GB): " vmDiskSize ; fi
if [ "$vmNetwork" == "" ] ; then read -p "VM Network: " vmNetwork ; fi
if [ "$osType" == "" ] ; then read -p "OS Type: " osType ; fi
if [ "$osUsername" == "" ] ; then read -p "OS Username: " osUsername ; fi
if [ "$osPassword" == "" ] ; then read -s -p "OS Password: " osPassword && echo "" ; fi
if [ "$osDomain" == "" ] ; then read -p "OS Domain: " osDomain ; fi
if [ "$osKeyboardLayout" == "" ] ; then read -p "OS Keyboard Layout: " osKeyboardLayout ; fi
if [ "$osLocale" == "" ] ; then read -p "OS Locale: " osLocale ; fi
if [ "$osTimezone" == "" ] ; then read -p "OS Timezone: " osLocale ; fi

# calculate vm disk size in GB
log "INFO" "Calculating VM disk size from Megabytes to Gigabytes"
vmDiskSize=$(($vmDiskSize * 1000))

# create temp folder
log "INFO" "Creating temp folder '$tmpFolder'"
mkdir -p "$tmpFolder"

# copy template files to temp folder
templateFolder="$scriptFolder/templates/$osType"
log "INFO" "Copying files from template folder '$templateFolder' to temp folder '$tmpFolder'"
cp "$templateFolder/"* "$tmpFolder"

# replace variables in template files
log "INFO" "Replacing variables in template files"
sed -i 's|'\${esxiServer}'|'$esxiServer'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${esxiUsername}'|'$esxiUsername'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${esxiPassword}'|'$esxiPassword'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${esxiDatastore}'|'$esxiDatastore'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${vmName}'|'$vmName'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${vmCores}'|'$vmCores'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${vmRamSize}'|'$vmRamSize'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${vmDiskSize}'|'$vmDiskSize'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${vmNetwork}'|'$vmNetwork'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${osType}'|'$osType'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${osUsername}'|'$osUsername'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${osPassword}'|'$osPassword'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${osDomain}'|'$osDomain'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${osKeyboardLayout}'|'$osKeyboardLayout'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${osLocale}'|'$osLocale'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${osTimezone}'|'$osTimezone'|g' "$packerFile" "$preseedFile" "$bootstrapFile"
sed -i 's|'\${tmpFolder}'|'$tmpFolder'|g' "$packerFile" "$preseedFile" "$bootstrapFile"

# create esxi vm with packer
log "INFO" "Creating VM with packer from file '$packerFile'"
packer build "$packerFile"

# cleanup work folder
log "INFO" "Cleaning up work folder '$workFolder'"
if [ -d "$workFolder" ]
then
    rm -rf "$workFolder"
fi

# get esxi vm id
log "INFO" "Getting VM ID from VM with name '$vmName'"
vmId=$(sshpass -p ${esxiPassword} ssh ${esxiUsername}@${esxiServer} vim-cmd vmsvc/getallvms | grep ${vmName} | awk '{print $1}')

# power on esxi vm
log "INFO" "Powering on VM with ID '$vmId'"
sshpass -p ${esxiPassword} ssh ${esxiUsername}@${esxiServer} vim-cmd vmsvc/power.on ${vmId} >> /dev/null